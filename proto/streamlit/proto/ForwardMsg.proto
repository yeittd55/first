/**
 * Copyright 2018-2020 Streamlit Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

syntax = "proto3";

import "streamlit/proto/Delta.proto";
import "streamlit/proto/NewReport.proto";
import "streamlit/proto/PageConfig.proto";
import "streamlit/proto/PageInfo.proto";
import "streamlit/proto/SessionEvent.proto";
import "streamlit/proto/SessionState.proto";

// A message sent from Proxy to the browser
message ForwardMsg {
  // A hash that uniquely identifies this ForwardMsg, for caching.
  string hash = 1;

  // Contains 'non-payload' ForwardMsg data that isn't cached for the purposes
  // of ForwardMsg de-duping.
  ForwardMsgMetadata metadata = 2;

  // Values for the 'report_finished` type
  enum ReportFinishedStatus {
    // The report compiled and ran.
    FINISHED_SUCCESSFULLY = 0;

    // The report failed to compile
    FINISHED_WITH_COMPILE_ERROR = 1;
  }

  oneof type {
    // Report lifecycle messages.

    NewReport new_report = 4;
    Delta delta = 5;
    PageInfo page_info_changed = 12;
    PageConfig page_config_changed = 13;
    ReportFinishedStatus report_finished = 6;

    // Upload progress messages.

    // Indicates the % progress of a report upload.
    uint32 upload_report_progress = 7;

    // Indicates that the upload is complete and gives the URL.
    string report_uploaded = 8;

    // State change and event messages.

    // ReportSession state changed. This is the new state.
    SessionState session_state_changed = 9;

    // A SessionEvent was emitted.
    SessionEvent session_event = 10;

    // Other messages.

    // A reference to a ForwardMsg that has already been delivered.
    // The client should substitute the message with the given hash
    // for this one. If the client does not have the referenced message
    // in its cache, it can retrieve it from the server.
    string ref_hash = 11;
  }

  // Next: 14
}

// ForwardMsgMetadata contains all data that does _not_ get hashed (or cached)
// in our ForwardMsgCache. (That is, when we cache a ForwardMsg, we clear its
// metadata field first.) This allows us to, e.g., have a large unchanging
// dataframe appear in different places across multiple reruns - or even appear
// multiple times in a single run - and only send its dataframe bytes once.
message ForwardMsgMetadata {
  // If this is set, the server will have cached this message,
  // and a client that receives it should do the same.
  bool cacheable = 1;

  // The path that identifies a delta's location in the report tree.
  // Only set for Delta messages.
  repeated uint32 delta_path = 2;

  ElementDimensionSpec element_dimension_spec = 3;
}

// Specifies the dimensions for the element
message ElementDimensionSpec {
  // width in CSS points
  uint32 width = 1;

  // height in CSS points
  uint32 height = 2;
}
